#!/usr/bin/python

import os, sys, pprint, optparse
import pydonet.nodelist as nodelist
import pydonet.utils.timeoutsocket as timeoutsocket
from pydonet.utils.odict import OrderedDict
import socket

SERVICEFLAGS = (
  ( 'IBN', 24554 ),
  ( 'ITN', 23 ),
  ( 'IFT', 21 ),
  ( 'IFC', 60179 ),
)

def tryConnect(host, port):

  res = None
  s = socket.socket()
  try:
    s.connect((host, int(port)))
    s.close()
    res = 'OKAY'
  except timeoutsocket.Timeout:
    res = 'TIMEOUT'
  except socket.error:
    res = 'FAILED'

  return res

def main():
  timeoutsocket.setDefaultSocketTimeout(10)

  N = nodelist.Nodelist(sys.argv[1])
  results = []
  seen = {}
  maxflaglen = 0

  for node in N.nodes:
    if seen.has_key(node.address):
      print '+ Skipping second entry for %s.' % node.address
      continue

    seen[node.address] = True

    print '+ %(address)s (%(name)s)' % node

    noderesult = OrderedDict()
    lastHost = None

    # Iterate through list of flags.
    for flag, defport in SERVICEFLAGS:
      for val in node.flags.get(flag, []):
        k = val is True and flag or '%s:%s' % (flag, val)
        if len(k) > maxflaglen:
          maxflaglen = len(k)

        print '  %s' % k,
        host, port = nodelist.ipForService(node, flag, val, checkDns = True)

        if host is None:
          host = lastHost

        if host is None:
          res  = 'INVALID'
        else:
          print '%s:%s' % (host,port),
          res = tryConnect(host, port or defport)
          lastHost = host

        print res
        noderesult[k] = res

    results.append((node, noderesult))

  for node, noderesult in results:
    print '%(address)-12s %(name)s' % node
    for flag, result in noderesult.items():
      print ' ' * 12, '%%-%ds %%s' % maxflaglen % (flag, result)

if __name__ == '__main__': main()

