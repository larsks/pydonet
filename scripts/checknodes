#!/usr/bin/python

import os, sys, pprint, optparse, time
import pydonet.nodelist as nodelist
import pydonet.utils.timeoutsocket as timeoutsocket
from pydonet.utils.odict import OrderedDict
import socket

SERVICEFLAGS = (
  ( 'IBN', 24554 ),
  ( 'ITN', 23 ),
  ( 'IFT', 21 ),
  ( 'IFC', 60179 ),
)

def tryConnect(host, port):

  res = None
  s = socket.socket()
  try:
    s.connect((host, int(port)))
    s.close()
    res = 'OKAY'
  except timeoutsocket.Timeout:
    res = 'TIMEOUT'
  except socket.error:
    res = 'FAILED'

  return res

def formatResults(results):
  maxaddrlen = 0
  maxhostlen = 0
  maxflaglen = 0

  # prescan for field widths
  for node, noderesult in results:
    addr = str(node.address)
    if len(addr) > maxaddrlen:
      maxaddrlen = len(addr)

    for flag, result in noderesult.items():
      if len(flag) > maxflaglen:
        maxflaglen = len(flag)

      res, host, port = result
      if len(host) > maxhostlen:
        maxhostlen = len(host)

  for node, noderesult in results:
    print '%%(address)-%ds' % maxaddrlen % node, '%(name)s' % node
    for flag, result in noderesult.items():
      print ' ' * maxaddrlen, '%%-%ds %%-%ds %%s' % (maxhostlen, maxflaglen) \
          % (result[1], flag, result[0])
    print

def checkNodes(nlist):
  results = []
  seen = {}

  for node in nlist.nodes:
    if seen.has_key(node.address):
      print '+ Skipping second entry for %s.' % node.address
      continue

    seen[node.address] = True

    print '+ %(address)s (%(name)s)' % node

    noderesult = OrderedDict()
    lastHost = None

    # Iterate through list of flags.
    for flag, defport in SERVICEFLAGS:
      for val in node.flags.get(flag, []):
        k = val is True and flag or '%s:%s' % (flag, val)

        print '  %s' % k,
        host, port = nodelist.ipForService(node, flag, val, checkDns = True)

        if host is None:
          host = lastHost

        if host is None:
          res  = 'INVALID'
        else:
          print '%s%s' % (host, port is not None and ':%s' % port or ''),
          res = tryConnect(host, port or defport)
          lastHost = host

        print res
        noderesult[k] = (res, host, port)

    results.append((node, noderesult))
    time.sleep(int(opts.interval))

  return results

def parse_args():
  parser = optparse.OptionParser()
  parser.add_option('-i', '--interval', default='1')
  parser.add_option('-o', '--output')
  parser.add_option('-e', '--errors-to')
  parser.add_option('-D', '--check-dns', action='store_true')
  
  return parser.parse_args()

def main():
  global opts

  timeoutsocket.setDefaultSocketTimeout(10)

  opts, args = parse_args()

  nlist = nodelist.Nodelist(args[0])
  results = checkNodes(nlist)
  formatResults(results)

if __name__ == '__main__': main()

